/*
 * This file is generated by jOOQ.
 */
package jooq.human.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import jooq.human.Human;
import jooq.human.Indexes;
import jooq.human.Keys;
import jooq.human.tables.records.Address1Record;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Address1 extends TableImpl<Address1Record> {

    private static final long serialVersionUID = 1080637091;

    /**
     * The reference instance of <code>human.address1</code>
     */
    public static final Address1 ADDRESS1 = new Address1();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Address1Record> getRecordType() {
        return Address1Record.class;
    }

    /**
     * The column <code>human.address1.address_id</code>.
     */
    public final TableField<Address1Record, Long> ADDRESS_ID = createField("address_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>human.address1.address1</code>.
     */
    public final TableField<Address1Record, String> ADDRESS1_ = createField("address1", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>human.address1.people_id</code>.
     */
    public final TableField<Address1Record, Long> PEOPLE_ID = createField("people_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>human.address1</code> table reference
     */
    public Address1() {
        this(DSL.name("address1"), null);
    }

    /**
     * Create an aliased <code>human.address1</code> table reference
     */
    public Address1(String alias) {
        this(DSL.name(alias), ADDRESS1);
    }

    /**
     * Create an aliased <code>human.address1</code> table reference
     */
    public Address1(Name alias) {
        this(alias, ADDRESS1);
    }

    private Address1(Name alias, Table<Address1Record> aliased) {
        this(alias, aliased, null);
    }

    private Address1(Name alias, Table<Address1Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Address1(Table<O> child, ForeignKey<O, Address1Record> key) {
        super(child, key, ADDRESS1);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Human.HUMAN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ADDRESS1_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Address1Record, Long> getIdentity() {
        return Keys.IDENTITY_ADDRESS1;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Address1Record> getPrimaryKey() {
        return Keys.KEY_ADDRESS1_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Address1Record>> getKeys() {
        return Arrays.<UniqueKey<Address1Record>>asList(Keys.KEY_ADDRESS1_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Address1 as(String alias) {
        return new Address1(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Address1 as(Name alias) {
        return new Address1(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Address1 rename(String name) {
        return new Address1(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Address1 rename(Name name) {
        return new Address1(name, null);
    }
}
